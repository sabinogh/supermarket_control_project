import streamlit as st
import pandas as pd
from services import db_queries
import datetime
import plotly.express as px

st.sidebar.title("Menu de Navega√ß√£o")
st.sidebar.markdown("""GSproject""")

st.set_page_config(page_title="Dashboard de An√°lise", layout="wide")

st.title("üìà Dashboard de An√°lise de Compras")
st.write("Visualize suas compras com gr√°ficos e estat√≠sticas detalhadas.")

# Sele√ß√£o de per√≠odo
col1, col2 = st.columns(2)

with col1:
	data_inicio = st.date_input(
		"Data de In√≠cio",
		value=datetime.date.today() - datetime.timedelta(days=30),
		max_value=datetime.date.today()
	)

with col2:
	data_fim = st.date_input(
		"Data de Fim",
		value=datetime.date.today(),
		max_value=datetime.date.today()
	)

# Bot√£o para buscar
if st.button("üîç Gerar Dashboard"):
	if data_inicio > data_fim:
		st.error("‚ùå A data de in√≠cio deve ser menor ou igual √† data de fim.")
	else:
		with st.spinner("Buscando dados para o dashboard..."):
			# Busca dados para estat√≠sticas (cabe√ßalho)
			compras_cabecalho = db_queries.get_compras_cabecalho_periodo(data_inicio, data_fim)
			# Chama a fun√ß√£o RPC para obter os dados detalhados para a tabela
			compras_detalhadas = db_queries.get_compras_detalhadas_rpc(data_inicio, data_fim)

			if compras_cabecalho and compras_detalhadas:
				df_cabecalho = pd.DataFrame(compras_cabecalho)
				df_detalhadas = pd.DataFrame(compras_detalhadas)

				if not df_cabecalho.empty and not df_detalhadas.empty:
					st.success(f"‚úÖ Dados carregados para {len(df_detalhadas)} itens de compras no per√≠odo selecionado!")

					# ======================
					# Filtro de Mercado
					# ======================
					mercados_disponiveis = df_detalhadas["mercado"].unique().tolist()
					mercados_selecionados = st.multiselect(
						"Filtrar por Mercado",
						options=mercados_disponiveis,
						default=mercados_disponiveis # Seleciona todos por padr√£o
					)

					if mercados_selecionados:
						df_detalhadas_filtrado = df_detalhadas[df_detalhadas["mercado"].isin(mercados_selecionados)]

						# Para filtrar o cabe√ßalho, precisamos dos IDs dos mercados correspondentes aos nomes selecionados
						# e das datas de compra presentes nos itens detalhados filtrados.

						# Obter os IDs dos mercados selecionados a partir dos nomes
						todos_mercados_db = db_queries.buscar_mercados()
						df_todos_mercados = pd.DataFrame(todos_mercados_db)

						# Filtrar os IDs dos mercados com base nos nomes selecionados
						mercado_ids_selecionados = df_todos_mercados[
							df_todos_mercados["nome"].isin(mercados_selecionados)
						]["id"].tolist()

						# Filtrar o DataFrame de cabe√ßalho com base nos IDs dos mercados selecionados
						df_cabecalho_filtrado = df_cabecalho[
							df_cabecalho["mercado_id"].isin(mercado_ids_selecionados)
						]

						if not df_detalhadas_filtrado.empty:
							# ======================
							# Estat√≠sticas
							# ======================
							st.subheader("üìä Estat√≠sticas Detalhadas do Per√≠odo")
							col1, col2, col3 = st.columns(3)

							total_gasto = df_detalhadas_filtrado["valor_total"].sum()
							with col1:
								st.metric("Total Gasto", f"R$ {total_gasto:.2f}")

							total_desconto = df_cabecalho_filtrado["descontos"].sum()
							with col2:
								st.metric("Total Desconto", f"R$ {total_desconto:.2f}")

							valor_final_pago = total_gasto - total_desconto
							with col3:
								st.metric("Valor Final Pago", f"R$ {valor_final_pago:.2f}")

							st.markdown("--- ")

							# ======================
							# An√°lises Gr√°ficas
							# ======================
							st.subheader("üìà An√°lises Gr√°ficas e Tend√™ncias")

							# Gr√°fico de Gastos por Mercado
							gastos_por_mercado = df_detalhadas_filtrado.groupby("mercado")["valor_total"].sum().reset_index()
							fig_mercado = px.bar(gastos_por_mercado, x="mercado", y="valor_total",
												 title="Gastos Totais por Mercado",
												 labels={"mercado": "Mercado", "valor_total": "Valor Gasto (R$)"})
							st.plotly_chart(fig_mercado, use_container_width=True)

							# Gr√°fico de Gastos por Data (Tend√™ncia)
							df_detalhadas_filtrado["data_compra"] = pd.to_datetime(df_detalhadas_filtrado["data_compra"])
							gastos_por_data = df_detalhadas_filtrado.groupby(df_detalhadas_filtrado["data_compra"].dt.date)["valor_total"].sum().reset_index()
							gastos_por_data.columns = ["Data da Compra", "Valor Gasto"]
							fig_data = px.line(gastos_por_data, x="Data da Compra", y="Valor Gasto",
											   title="Tend√™ncia de Gastos ao Longo do Tempo",
											   labels={"Data da Compra": "Data", "Valor Gasto": "Valor Gasto (R$)"})
							st.plotly_chart(fig_data, use_container_width=True)

							# Gr√°fico de Itens Mais Comprados
							itens_mais_comprados = df_detalhadas_filtrado.groupby("descricao")["quantidade"].sum().nlargest(10).reset_index()
							fig_itens = px.bar(itens_mais_comprados, x="descricao", y="quantidade",
											   title="Top 10 Itens Mais Comprados (por Quantidade)",
											   labels={"descricao": "Item", "quantidade": "Quantidade Total"})
							st.plotly_chart(fig_itens, use_container_width=True)

						else:
							st.info("üì≠ Nenhuma compra encontrada para os mercados selecionados no per√≠odo.")
					else:
						st.info("Por favor, selecione ao menos um mercado para filtrar.")

				else:
					st.info("üì≠ Nenhuma compra encontrada no per√≠odo selecionado.")
			else:
				st.error("‚ùå Erro ao buscar compras. Verifique a conex√£o com o banco de dados ou se h√° dados no per√≠odo.")
